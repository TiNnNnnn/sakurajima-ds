// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: test.proto

package genpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvServiceClient is the client API for KvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvServiceClient interface {
	DoPut(ctx context.Context, in *PutArgs, opts ...grpc.CallOption) (*PutReply, error)
	DoGet(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetReply, error)
}

type kvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKvServiceClient(cc grpc.ClientConnInterface) KvServiceClient {
	return &kvServiceClient{cc}
}

func (c *kvServiceClient) DoPut(ctx context.Context, in *PutArgs, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := c.cc.Invoke(ctx, "/pbs.KvService/DoPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) DoGet(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/pbs.KvService/DoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvServiceServer is the server API for KvService service.
// All implementations must embed UnimplementedKvServiceServer
// for forward compatibility
type KvServiceServer interface {
	DoPut(context.Context, *PutArgs) (*PutReply, error)
	DoGet(context.Context, *GetArgs) (*GetReply, error)
	mustEmbedUnimplementedKvServiceServer()
}

// UnimplementedKvServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKvServiceServer struct {
}

func (UnimplementedKvServiceServer) DoPut(context.Context, *PutArgs) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoPut not implemented")
}
func (UnimplementedKvServiceServer) DoGet(context.Context, *GetArgs) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoGet not implemented")
}
func (UnimplementedKvServiceServer) mustEmbedUnimplementedKvServiceServer() {}

// UnsafeKvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvServiceServer will
// result in compilation errors.
type UnsafeKvServiceServer interface {
	mustEmbedUnimplementedKvServiceServer()
}

func RegisterKvServiceServer(s grpc.ServiceRegistrar, srv KvServiceServer) {
	s.RegisterService(&KvService_ServiceDesc, srv)
}

func _KvService_DoPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).DoPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.KvService/DoPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).DoPut(ctx, req.(*PutArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_DoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).DoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.KvService/DoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).DoGet(ctx, req.(*GetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// KvService_ServiceDesc is the grpc.ServiceDesc for KvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.KvService",
	HandlerType: (*KvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoPut",
			Handler:    _KvService_DoPut_Handler,
		},
		{
			MethodName: "DoGet",
			Handler:    _KvService_DoGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
