syntax="proto3";

package pbs;

option go_package = "../tinnraftpb";

message RequestVoteArgs {
	int64 Term = 1;   
	int64 CandidateId  = 2;
	int64 LastLogIndex = 3;
	int64 LastLogTerm  = 4;
}

message RequestVoteReply{
	int64 Term = 1;
	bool VoteGranted = 2;
}

/*
1. EntryData -> put,get
2. EntryConfUpdate ->cluster config update
*/

enum EntryType{
	EntryData = 0;
	EntryConfUpdate = 1;
}

message Entry {
	EntryType Type  = 1;
	uint64 	  Term  = 2;
	int64 	  Index = 3;
	bytes     Data  = 4;
}

message AppendEntriesArgs {
	int64             Term = 1;         
	int64         LeaderId = 2;    
	int64     PrevLogIndex = 3;
	int64      PrevLogTerm = 4;
	repeated Entry Entries = 5;      
	int64     LeaderCommit = 6;
}

message AppendEntriesReply {
	int64 Term =1;
	bool Success = 2;
	bool Conflict = 3;
	int64 XTerm = 4;
	int64 XIndex = 5;
	int64 XLen = 6;
}

message ApplyMsg {
	bool CommandValid = 1; 
	bytes Command = 2;
	int64 CommandIndex =3;
	int64 CommandTerm = 4;

	bool SnapshotValid = 5;
	bytes Snapshot = 6;      
	int64 SnapshotTerm = 7;
	int64 SnapshotIndex = 8;
}

message InstallSnapshotArgs{
	int64 Term = 1;
	int64 LeaderId = 2;
	int64 LastIncludedIndex = 3;
	int64 LastIncludeTerm = 4;
	bytes Data = 5;
}

message InstallSnapshotReply{
	int64 Term = 1;
}

enum OpType{
	Put = 0;
	Append = 1;
	Get = 2;
	ConfigChange = 3;
	DeleteBuckets = 4;
	InsertBuckets = 5;
}

message CommandArgs{
	string Key = 1;
	string Value = 2;
	OpType Op_type = 3;
	int64 Client_id = 4;
	int64 command_id = 5;
	bytes context = 6;
}

message CommandReply{
	string Value = 1;
	int64 LeaderId = 2;
	int64 ErrCode = 3;
}

/*
配置服务器相关操作
1 Join: 将一个新的分组服务器加入集群配置
2 Leave: 将一个分组服务器从集群配置中删除
3 Move: 将某个桶分配给相应的分组
4 Query: 查询配置信息
*/
enum ConfigOpType{
	Join = 0;
	Leave = 1;
	Move = 2;
	Query = 3;
}

message ConfigArgs{
	map<int64,string> Servers = 1;
	repeated int64 groupIds = 2;
	int64 BucketId = 3;
	int64 GroupId = 4;
	int64 ConfigVersion = 5;
	ConfigOpType OpType = 6;
	int64 ClientId = 7;
	int64 CommandId = 8;
}

message ServerConfig{
	int64 ConfigVersion = 1;    //配置信息版本
	repeated int64 Buckets = 2; //bucket数组
	map<int64,string> groups = 3; // 集群分组信息
}

message ConfigReply{
	string ErrMsg = 1;
	ServerConfig Config = 2;
	int64 LeaderId = 3;
	int64 err_code = 4;
}

// shared服务器分组相关操作
enum BucketOpType{
	GetData = 0;
	DelData = 1;
	AddData = 2;
}

message BucketOpArgs{
	int64 ConfigVersion = 1;
	repeated int64 BucketIds = 2;
	BucketOpType BucketOpType = 3;
	int64 GroupId = 4;
	bytes BucketsData = 5;
}

message BucketOpReply{
	int64 ConfigVersion = 1;
	bytes BucketData = 2;
	string ErrMsg = 3;
}

//数据块描述
message Block{
	string DataTableName = 1;//数据块表表名
	int64 BlockSize = 2; //数据块大小
	int64 BlockId = 3; //数据块Id
}

//一个对象的数据块列表
message DataBlocks{
	repeated Block BlockList = 1; //一个对象被分割为多个block, 使用BlockList存储所有块信息
} 

/*
	元数据服务模块
*/
enum MetaOpType2{
	PutName = 0;
	PutObject = 1;
	GetObjectList = 2;
	QueryList = 3;
}

message MetaArgs2{
	MetaOpType2 OpType = 1;
	string BucketName = 2;
	string ObjectName = 3;
	int64 ObjectId = 4;
	int64 Num = 5;
	DataBlocks BlockList = 6;
}

message MetaReply2{
	string ErrMsg = 1;
	int64 ErrCode = 2;
	int64 LeaderId = 3;
	int64 BlockId = 4;
	repeated int64 BlockIdList = 6;
}

enum MetaOpType{
	PutMetadata = 0;
	GetMetadata = 1;
	SearchLastestVersion = 2;
	SearchAllVersion = 3;
	DelMetadata = 4;
	AddVersion = 5;
}

message MetaArgs{
	MetaOpType op = 1;
	int64 UserId = 2;
	string BucketName = 3;
	string ObjectName = 4;
	int64 Version = 5;
	int64 Size = 6;
	string Hash = 7;
}


message Metadata{
	int64 UserId = 2;
	string BucketName = 3;
	string ObjectName = 4;
	int64 Version = 5;
	int64 Size = 6;
	string Hash = 7;
}

message MetaReply{
	string ErrMsg = 1;
	int64 ErrCode = 2;
	int64 LeaderId = 3;
	repeated Metadata metas = 4;
	Metadata meta = 5;
}



enum LogOp{
	GetAll = 0;
}

message LogArgs{
	LogOp op= 1;
}

message LogReply{
	string LogMsg = 1;
}

service RaftService{
    rpc RequestVote (RequestVoteArgs) returns (RequestVoteReply){}
	rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply){}
	rpc Snapshot(InstallSnapshotArgs)returns(InstallSnapshotReply){}
	
	rpc DoCommand(CommandArgs)returns(CommandReply){}
	
	rpc DoConfig(ConfigArgs) returns (ConfigReply){}
	rpc DoBucket(BucketOpArgs)returns (BucketOpReply){}

	rpc DoMeta(MetaArgs) returns (MetaReply){}

	rpc DoLog(LogArgs) returns (LogReply){}
}







